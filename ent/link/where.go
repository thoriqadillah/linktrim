// Code generated by ent, DO NOT EDIT.

package link

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/thoriqadillah/linktrim/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOwnerID, v))
}

// Original applies equality check predicate on the "original" field. It's identical to OriginalEQ.
func Original(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOriginal, v))
}

// Trimmed applies equality check predicate on the "trimmed" field. It's identical to TrimmedEQ.
func Trimmed(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTrimmed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUpdatedAt, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldOwnerID, v))
}

// OriginalEQ applies the EQ predicate on the "original" field.
func OriginalEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOriginal, v))
}

// OriginalNEQ applies the NEQ predicate on the "original" field.
func OriginalNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldOriginal, v))
}

// OriginalIn applies the In predicate on the "original" field.
func OriginalIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldOriginal, vs...))
}

// OriginalNotIn applies the NotIn predicate on the "original" field.
func OriginalNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldOriginal, vs...))
}

// OriginalGT applies the GT predicate on the "original" field.
func OriginalGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldOriginal, v))
}

// OriginalGTE applies the GTE predicate on the "original" field.
func OriginalGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldOriginal, v))
}

// OriginalLT applies the LT predicate on the "original" field.
func OriginalLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldOriginal, v))
}

// OriginalLTE applies the LTE predicate on the "original" field.
func OriginalLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldOriginal, v))
}

// OriginalContains applies the Contains predicate on the "original" field.
func OriginalContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldOriginal, v))
}

// OriginalHasPrefix applies the HasPrefix predicate on the "original" field.
func OriginalHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldOriginal, v))
}

// OriginalHasSuffix applies the HasSuffix predicate on the "original" field.
func OriginalHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldOriginal, v))
}

// OriginalEqualFold applies the EqualFold predicate on the "original" field.
func OriginalEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldOriginal, v))
}

// OriginalContainsFold applies the ContainsFold predicate on the "original" field.
func OriginalContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldOriginal, v))
}

// TrimmedEQ applies the EQ predicate on the "trimmed" field.
func TrimmedEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTrimmed, v))
}

// TrimmedNEQ applies the NEQ predicate on the "trimmed" field.
func TrimmedNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldTrimmed, v))
}

// TrimmedIn applies the In predicate on the "trimmed" field.
func TrimmedIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldTrimmed, vs...))
}

// TrimmedNotIn applies the NotIn predicate on the "trimmed" field.
func TrimmedNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldTrimmed, vs...))
}

// TrimmedGT applies the GT predicate on the "trimmed" field.
func TrimmedGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldTrimmed, v))
}

// TrimmedGTE applies the GTE predicate on the "trimmed" field.
func TrimmedGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldTrimmed, v))
}

// TrimmedLT applies the LT predicate on the "trimmed" field.
func TrimmedLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldTrimmed, v))
}

// TrimmedLTE applies the LTE predicate on the "trimmed" field.
func TrimmedLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldTrimmed, v))
}

// TrimmedContains applies the Contains predicate on the "trimmed" field.
func TrimmedContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldTrimmed, v))
}

// TrimmedHasPrefix applies the HasPrefix predicate on the "trimmed" field.
func TrimmedHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldTrimmed, v))
}

// TrimmedHasSuffix applies the HasSuffix predicate on the "trimmed" field.
func TrimmedHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldTrimmed, v))
}

// TrimmedEqualFold applies the EqualFold predicate on the "trimmed" field.
func TrimmedEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldTrimmed, v))
}

// TrimmedContainsFold applies the ContainsFold predicate on the "trimmed" field.
func TrimmedContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldTrimmed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Link) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		p(s.Not())
	})
}
