// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thoriqadillah/linktrim/ent/link"
	"github.com/thoriqadillah/linktrim/ent/user"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	mutation *LinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOwnerID sets the "owner_id" field.
func (lc *LinkCreate) SetOwnerID(u uuid.UUID) *LinkCreate {
	lc.mutation.SetOwnerID(u)
	return lc
}

// SetOriginal sets the "original" field.
func (lc *LinkCreate) SetOriginal(s string) *LinkCreate {
	lc.mutation.SetOriginal(s)
	return lc
}

// SetTrimmed sets the "trimmed" field.
func (lc *LinkCreate) SetTrimmed(s string) *LinkCreate {
	lc.mutation.SetTrimmed(s)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LinkCreate) SetCreatedAt(t time.Time) *LinkCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LinkCreate) SetNillableCreatedAt(t *time.Time) *LinkCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LinkCreate) SetUpdatedAt(t time.Time) *LinkCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetID sets the "id" field.
func (lc *LinkCreate) SetID(u uuid.UUID) *LinkCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LinkCreate) SetNillableID(u *uuid.UUID) *LinkCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (lc *LinkCreate) SetOwnerID(id uuid.UUID) *LinkCreate {
	lc.mutation.SetOwnerID(id)
	return lc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (lc *LinkCreate) SetNillableOwnerID(id *uuid.UUID) *LinkCreate {
	if id != nil {
		lc = lc.SetOwnerID(*id)
	}
	return lc
}

// SetOwner sets the "owner" edge to the User entity.
func (lc *LinkCreate) SetOwner(u *User) *LinkCreate {
	return lc.SetOwnerID(u.ID)
}

// Mutation returns the LinkMutation object of the builder.
func (lc *LinkCreate) Mutation() *LinkMutation {
	return lc.mutation
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LinkCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LinkCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LinkCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := link.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := link.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LinkCreate) check() error {
	if _, ok := lc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Link.owner_id"`)}
	}
	if _, ok := lc.mutation.Original(); !ok {
		return &ValidationError{Name: "original", err: errors.New(`ent: missing required field "Link.original"`)}
	}
	if _, ok := lc.mutation.Trimmed(); !ok {
		return &ValidationError{Name: "trimmed", err: errors.New(`ent: missing required field "Link.trimmed"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Link.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Link.updated_at"`)}
	}
	return nil
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LinkCreate) createSpec() (*Link, *sqlgraph.CreateSpec) {
	var (
		_node = &Link{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(link.Table, sqlgraph.NewFieldSpec(link.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.OwnerID(); ok {
		_spec.SetField(link.FieldOwnerID, field.TypeUUID, value)
		_node.OwnerID = value
	}
	if value, ok := lc.mutation.Original(); ok {
		_spec.SetField(link.FieldOriginal, field.TypeString, value)
		_node.Original = value
	}
	if value, ok := lc.mutation.Trimmed(); ok {
		_spec.SetField(link.FieldTrimmed, field.TypeString, value)
		_node.Trimmed = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(link.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(link.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.OwnerTable,
			Columns: []string{link.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.Create().
//		SetOwnerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetOwnerID(v+v).
//		}).
//		Exec(ctx)
func (lc *LinkCreate) OnConflict(opts ...sql.ConflictOption) *LinkUpsertOne {
	lc.conflict = opts
	return &LinkUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LinkCreate) OnConflictColumns(columns ...string) *LinkUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertOne{
		create: lc,
	}
}

type (
	// LinkUpsertOne is the builder for "upsert"-ing
	//  one Link node.
	LinkUpsertOne struct {
		create *LinkCreate
	}

	// LinkUpsert is the "OnConflict" setter.
	LinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetOwnerID sets the "owner_id" field.
func (u *LinkUpsert) SetOwnerID(v uuid.UUID) *LinkUpsert {
	u.Set(link.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *LinkUpsert) UpdateOwnerID() *LinkUpsert {
	u.SetExcluded(link.FieldOwnerID)
	return u
}

// SetOriginal sets the "original" field.
func (u *LinkUpsert) SetOriginal(v string) *LinkUpsert {
	u.Set(link.FieldOriginal, v)
	return u
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *LinkUpsert) UpdateOriginal() *LinkUpsert {
	u.SetExcluded(link.FieldOriginal)
	return u
}

// SetTrimmed sets the "trimmed" field.
func (u *LinkUpsert) SetTrimmed(v string) *LinkUpsert {
	u.Set(link.FieldTrimmed, v)
	return u
}

// UpdateTrimmed sets the "trimmed" field to the value that was provided on create.
func (u *LinkUpsert) UpdateTrimmed() *LinkUpsert {
	u.SetExcluded(link.FieldTrimmed)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LinkUpsert) SetCreatedAt(v time.Time) *LinkUpsert {
	u.Set(link.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LinkUpsert) UpdateCreatedAt() *LinkUpsert {
	u.SetExcluded(link.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LinkUpsert) SetUpdatedAt(v time.Time) *LinkUpsert {
	u.Set(link.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LinkUpsert) UpdateUpdatedAt() *LinkUpsert {
	u.SetExcluded(link.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LinkUpsertOne) UpdateNewValues() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(link.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LinkUpsertOne) Ignore() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertOne) DoNothing() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreate.OnConflict
// documentation for more info.
func (u *LinkUpsertOne) Update(set func(*LinkUpsert)) *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *LinkUpsertOne) SetOwnerID(v uuid.UUID) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateOwnerID() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOwnerID()
	})
}

// SetOriginal sets the "original" field.
func (u *LinkUpsertOne) SetOriginal(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetOriginal(v)
	})
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateOriginal() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOriginal()
	})
}

// SetTrimmed sets the "trimmed" field.
func (u *LinkUpsertOne) SetTrimmed(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetTrimmed(v)
	})
}

// UpdateTrimmed sets the "trimmed" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateTrimmed() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateTrimmed()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *LinkUpsertOne) SetCreatedAt(v time.Time) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateCreatedAt() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LinkUpsertOne) SetUpdatedAt(v time.Time) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateUpdatedAt() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LinkUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LinkUpsertOne.ID is not supported by MySQL driver. Use LinkUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LinkUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LinkCreateBulk is the builder for creating many Link entities in bulk.
type LinkCreateBulk struct {
	config
	builders []*LinkCreate
	conflict []sql.ConflictOption
}

// Save creates the Link entities in the database.
func (lcb *LinkCreateBulk) Save(ctx context.Context) ([]*Link, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Link, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LinkCreateBulk) SaveX(ctx context.Context) []*Link {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LinkCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LinkCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetOwnerID(v+v).
//		}).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *LinkUpsertBulk {
	lcb.conflict = opts
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflictColumns(columns ...string) *LinkUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// LinkUpsertBulk is the builder for "upsert"-ing
// a bulk of Link nodes.
type LinkUpsertBulk struct {
	create *LinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(link.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LinkUpsertBulk) UpdateNewValues() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(link.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LinkUpsertBulk) Ignore() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertBulk) DoNothing() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreateBulk.OnConflict
// documentation for more info.
func (u *LinkUpsertBulk) Update(set func(*LinkUpsert)) *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *LinkUpsertBulk) SetOwnerID(v uuid.UUID) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateOwnerID() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOwnerID()
	})
}

// SetOriginal sets the "original" field.
func (u *LinkUpsertBulk) SetOriginal(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetOriginal(v)
	})
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateOriginal() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateOriginal()
	})
}

// SetTrimmed sets the "trimmed" field.
func (u *LinkUpsertBulk) SetTrimmed(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetTrimmed(v)
	})
}

// UpdateTrimmed sets the "trimmed" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateTrimmed() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateTrimmed()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *LinkUpsertBulk) SetCreatedAt(v time.Time) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateCreatedAt() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LinkUpsertBulk) SetUpdatedAt(v time.Time) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateUpdatedAt() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
